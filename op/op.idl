// op.idl: op 的 IDL 源
//

// 此文件将由 MIDL 工具处理以
// 生成类型库(op.tlb)和封送处理代码。

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(a817e7a2-43fa-11d0-9e44-00aa00b6770a),
	dual,
	pointer_default(unique)
]
interface IComponentRegistrar : IDispatch
{
	[id(1)]	HRESULT Attach([in] BSTR bstrPath);
	[id(2)]	HRESULT RegisterAll();
	[id(3)]	HRESULT UnregisterAll();
	[id(4)]	HRESULT GetComponents([out] SAFEARRAY(BSTR)* pbstrCLSIDs, [out] SAFEARRAY(BSTR)* pbstrDescriptions);
	[id(5)]	HRESULT RegisterComponent([in] BSTR bstrCLSID);
	[id(6)] HRESULT UnregisterComponent([in] BSTR bstrCLSID);
};

[
	object,
	uuid(51e59a6f-85f4-4da0-a01e-c9b6b3b8b8a7),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IOpInterface : IDispatch
{
	[id(1)] HRESULT Ver([out, retval] BSTR* ret);
	[id(2)] HRESULT SetPath([in]BSTR path, [out, retval] LONG* ret);
	[id(3)] HRESULT GetPath([out, retval] BSTR* path);
	[id(4)] HRESULT Sleep([in] LONG millseconds, [out, retval] LONG* ret);

	[id(31)] HRESULT InjectDll(BSTR process_name, BSTR dll_name, LONG* ret);

	[id(58)] HRESULT EnumWindow([in] LONG parent, [in] BSTR title, [in] BSTR class_name, [in] LONG filter, [out, retval] BSTR* retstr);
	[id(59)] HRESULT EnumWindowByProcess([in] BSTR process_name, [in] BSTR title, [in] BSTR class_name, [in] LONG filter, [out, retval] BSTR* retstring);
	[id(60)] HRESULT EnumProcess([in] BSTR name, [out, retval] BSTR* retstring);
	[id(61)] HRESULT ClientToScreen([in] LONG ClientToScreen, [in, out] VARIANT* x, [in, out] VARIANT* y, [out, retval] LONG* bret);
	[id(62)] HRESULT FindWindow([in] BSTR class_name, [in] BSTR title, [out, retval] LONG* rethwnd);
	[id(63)] HRESULT FindWindowByProcess([in] BSTR process_name, [in] BSTR class_name, [in] BSTR title, [out, retval] LONG* rethwnd);
	[id(64)] HRESULT FindWindowByProcessId([in] LONG process_id, [in] BSTR class_name, [in] BSTR title, [out, retval] LONG* rethwnd);
	[id(65)] HRESULT FindWindowEx([in] LONG parent, [in] BSTR class_name, [in] BSTR title, [out, retval] LONG* rethwnd);
	[id(66)] HRESULT GetClientRect([in] LONG hwnd, [out] VARIANT* x1, [out] VARIANT* y1, [out] VARIANT* x2, [out] VARIANT* y2, [out, retval] LONG* nret);
	[id(67)] HRESULT GetClientSize([in] LONG hwnd, [out] VARIANT* width, [out] VARIANT* height, [out, retval] LONG* nret);
	[id(68)] HRESULT GetForegroundFocus([out, retval] LONG* rethwnd);
	[id(69)] HRESULT GetForegroundWindow([out, retval] LONG* rethwnd);
	[id(70)] HRESULT GetMousePointWindow([out, retval] LONG* rethwnd);
	[id(71)] HRESULT GetPointWindow([in] LONG x, [in] LONG y, [out, retval] LONG* rethwnd);
	[id(72)] HRESULT GetProcessInfo([in] LONG pid, [out, retval] BSTR* retstring);
	[id(73)] HRESULT GetSpecialWindow([in] LONG flag, [out, retval] LONG* rethwnd);
	[id(74)] HRESULT GetWindow([in] LONG hwnd, [in] LONG flag, [out, retval] LONG* nret);
	[id(75)] HRESULT GetWindowClass([in] LONG hwnd, [out, retval] BSTR* retstring);
	[id(76)] HRESULT GetWindowProcessId([in] LONG hwnd, [out, retval] LONG* nretpid);
	[id(77)] HRESULT GetWindowProcessPath([in] LONG hwnd, [out, retval] BSTR* retstring);
	[id(78)] HRESULT GetWindowRect([in] LONG hwnd, [out] VARIANT* x1, [out] VARIANT* y1, [out] VARIANT* x2, [out] VARIANT* y2, [out, retval] LONG* nret);
	[id(79)] HRESULT GetWindowState([in] LONG hwnd, [in] LONG flag, [out, retval] LONG* rethwnd);
	[id(80)] HRESULT GetWindowTitle([in] LONG hwnd, [out, retval] BSTR* rettitle);
	[id(81)] HRESULT MoveWindow([in] LONG hwnd, [in] LONG x, [in] LONG y, [out, retval] LONG* nret);
	[id(82)] HRESULT ScreenToClient([in] LONG hwnd, [out] VARIANT* x, [out] VARIANT* y, [out, retval] LONG* nret);
	[id(83)] HRESULT SendPaste([in] LONG hwnd, [out, retval] LONG* nret);
	[id(84)] HRESULT SetClientSize([in] LONG hwnd, [in] LONG width, [in] LONG hight, [out, retval] LONG* nret);
	[id(85)] HRESULT SetWindowState([in] LONG hwnd, [in] LONG flag, [out, retval] LONG* nret);
	[id(86)] HRESULT SetWindowSize([in] LONG hwnd, [in] LONG width, [in] LONG height, [out, retval] LONG* nret);
	[id(87)] HRESULT SetWindowText([in] LONG hwnd, [in] BSTR title, [out, retval] LONG* nret);
	[id(88)] HRESULT SetWindowTransparent([in] LONG hwnd, [in] LONG trans, [out, retval] LONG* nret);
	[id(89)] HRESULT ExcuteCmd([in] BSTR cmd,[in] LONG millseconds, [out, retval] BSTR* retstr);
	[id(90)] HRESULT MoveTo([in] LONG x, [in] LONG y, [out, retval] LONG* ret);
	[id(91)] HRESULT LeftClick([out, retval] LONG* ret);
	[id(92)] HRESULT BindWindow([in] LONG hwnd, [in] BSTR display, [in] BSTR mouse, [in] BSTR keypad, [in] LONG mode, [out, retval] LONG *ret);
	[id(93)] HRESULT Capture([in] BSTR file_name, [out, retval] LONG* ret);
	[id(94)] HRESULT UnBind([out, retval] LONG* ret);
	[id(95)] HRESULT FindPic([in] LONG x1, [in]LONG y1, [in] LONG x2, [in] LONG y2, [in] BSTR files, [in] DOUBLE sim, [out] VARIANT* x, [out] VARIANT* y, [out, retval] LONG* ret);
	[id(96)] HRESULT SetDict([in] LONG idx, [in] BSTR file_name, [out, retval] LONG* ret);
	[id(97)] HRESULT Ocr([in] LONG x1, [in] LONG y1, [in] LONG x2, [in] LONG y2, [in] BSTR color, [in] DOUBLE sim, [out, retval] BSTR* ret_str);
	[id(98)] HRESULT FindColor([in] LONG x1, [in] LONG y1, [in] LONG x2, [in] LONG y2, [in] BSTR color, [out] VARIANT* x, [out] VARIANT* y, [out, retval] LONG* ret);
	[id(99)] HRESULT GetColor([in] LONG x, [in] LONG y, [out, retval] BSTR* ret);
};
[
	uuid(66b9c175-82f2-45e9-af86-58ad5ded5adc),
	version(1.0),
	custom(a817e7a1-43fa-11d0-9e44-00aa00b6770a,"{54ca0535-fb49-4d91-8709-786fb8725132}")
]
library opLib
{
	importlib("stdole2.tlb");
	[
		uuid(54ca0535-fb49-4d91-8709-786fb8725132)
	]
	coclass CompReg
	{
		[default] interface IComponentRegistrar;
	};
	[
		uuid(12bec402-a06e-4fad-a7d4-830f967374c6)
	]
	coclass OpInterface
	{
		[default] interface IOpInterface;
	};
};

import "shobjidl.idl";
